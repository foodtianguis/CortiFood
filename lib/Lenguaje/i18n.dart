import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class L implements WidgetsLocalizations {
  const L();

  static L current;

  static const GeneratedLocalizationsDelegate delegate =
  GeneratedLocalizationsDelegate();

  static L of(BuildContext context) => Localizations.of<L>(context, L);

  @override
  TextDirection get textDirection => TextDirection.ltr;
  //
  String get sNomUser => 'Nombre de Usuario o Número Telefonico';
  String get sNomUserEmp => 'Usuario Empresarial';
  String get sPassword => 'Contraseña';
  String get sPasswordConf => 'Confirmar Contraseña';
  String get sEntrar => "Entrar";

  String get sNombre => "Nombre";
  String get sApellido => "Apellido";
  String get sFechaNac => "Fecha de Nacimiento";
  String get sCelular => "No. de Celular";
  String get sCP => "Codigo Postal";
  String get sCalle => "Calle";
  String get sColonia => "Colonia";
  String get sCiudad => "Ciudad";
  String get sFoto => "Foto";
  String get sNumInt => "No. Int";
  String get sNumExt => "No. Ext";
//
  String get sMensajeErrorLoguin => 'Error: Verificar Usuario o Contraseña';
  String get sErrorIngrese => 'Ingrese: ';
//                  Restaurant
  String get sNomRestauran => "Nombre Restaurant";
  String get sDescripcion => "Descripción";
  String get sTelefono => "Telefono";
  String get sDomicilio => "Domicilio";
//
  String get sSiguiente => 'Siguiente';
  String get sConfirma => 'Confirmar';
  String get sMensaje => 'Mensaje';
  String get sAyuda => 'Ayuda';
  String get sMiDatos => 'Mis Datos';
  String get sRecUser => 'Recordar Usuario';

  String get sRegis => 'Registrarse';
  String get sRegisEmpresa => 'Registrar Empresa';
  String get sRegisFace => "Registrate con Facebook";

  String get sCerrarSecion => 'Cerrar Secion';
  String get sInicSecion => 'Cerrar Secion';
  String get sSalir => 'Salir';
  //

  String appUpdateFoundNewVersion(String version) => "New version $version";
}

class $es extends L {
  const $es();
}

class $en extends L {
  const $en();

  @override
  String get sNomUser => 'Nombre de Usuario o Número Telefonico';
  @override
  String get sNomUserEmp => 'Usuario Empresarial';
  @override
  String get sPassword => 'Password';
  @override
  String get sPasswordConf => 'Confirmar Contraseña';
  @override
  String get sEntrar => "Entrar";
  @override
  String get sNombre => "Name";
  @override
  String get sApellido => "Last Name";
  @override
  String get sFechaNac => "Fecha de Nacimiento";
  @override
  String get sCelular => "Number Phone";
  @override
  String get sCP => "Codigo Postal";
  @override
  String get sCalle => "Calle";
  @override
  String get sColonia => "Colonia";
  @override
  String get sCiudad => "Ciudad";
  @override
  String get sFoto => "Photo";
  @override
  String get sNumInt => "No. Int";
  @override
  String get sNumExt => "No. Ext";
  @override
  String get sMensajeErrorLoguin => 'Error: Verificar Usuario o Contraseña';
  @override
  String get sErrorIngrese => 'Ingrese: ';
//                  Restaurant
  @override
  String get sNomRestauran => "Nombre Restaurant";
  @override
  String get sDescripcion => "Description";
  @override
  String get sTelefono => "Phone";
  @override
  String get sDomicilio => "Domicilio";
//
  @override
  String get sSiguiente => 'Next';
  @override
  String get sConfirma => 'Confirm';
  @override
  String get sMensaje => 'Mensage';
  @override
  String get sAyuda => 'Help';
  @override
  String get sMiDatos => 'My Data';
  @override
  String get sRecUser => 'Recordar Usuario';

  @override
  String get sRegis => 'Registrarse';
  @override
  String get sRegisEmpresa => 'Registrar Empresa';
  @override
  String get sRegisFace => "Registrate con Facebook";

  @override
  String get sCerrarSecion => 'Cerrar Secion';
  @override
  String get sInicSecion => 'Cerrar Secion';
  @override
  String get sSalir => 'Exit';
  @override
  TextDirection get textDirection => TextDirection.ltr;


  String appUpdateFoundNewVersion(String version) => "发现新版本$version,是否更新?";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<L> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("es", "ES"),
      Locale("en", "EN"),
    ];
  }

  LocaleListResolutionCallback listResolution(
      {Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution(
      {Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<L> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "es":
          L.current = const $en();
          return SynchronousFuture<L>(L.current);
        case "en":
          L.current = const $en();
          return SynchronousFuture<L>(L.current);
        default:
        // NO-OP.
      }
    }
    L.current = const L();
    return SynchronousFuture<L>(L.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported,
      bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry &&
            (supportedLocale.countryCode == null ||
                supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
